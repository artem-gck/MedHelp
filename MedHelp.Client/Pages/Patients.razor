@page "/patients"
@using System.Text.RegularExpressions
@layout MainLayout

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDoctorService _doctorService
@inject IAuthService _authService
@inject IPatientService _patientService
@inject IBasicService _basicService

<div class="patients">
    <div class="container vertical plot">
        <input class="search" @oninput="async e => await Search(e)"></input>
        <div class="container vertical" style="--use-accessibility:true;">
            @if (patientsView != null)
            {
                <div style="overflow: hidden">
                    <IgbDataGrid Height="800px" 
                                    Width="1200px"
                                    DataSource="patientsView"
                                    AutoGenerateColumns="false"
                                    SelectionMode="GridSelectionMode.SingleRow"
                                    CellClicked="e => OnSelectRowClick(e)"
                                    BorderWidthBottom=0
                                    BorderWidthLeft=0
                                    BorderWidthRight=0>
                        <IgbTextColumn Field="Login" HeaderText="Логин" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbTextColumn Field="Password" HeaderText="Пароль" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbTextColumn Field="FirstName" HeaderText="Фамилия" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbTextColumn Field="Name" HeaderText="Имя" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbTextColumn Field="LastName" HeaderText="Отчество" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbTextColumn Field="NumberOfPhone" HeaderText="Номер телефона" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbDateTimeColumn Field="DateOfDirth" HeaderText="Дата рождения" Width="@("*>100")" DateTimeFormat="DateTimeFormats.DateTimeShort" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbTextColumn Field="Sex" HeaderText="Пол" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                        <IgbNumericColumn Field="Tolons" HeaderText="Толоны" Width="@("*>100")" HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                    </IgbDataGrid>
                </div>
            }
        </div>
        <div class="buttons">
            <button @onclick="async e => await Add()">Добавить</button>
            <button @onclick="async e => await Edit()">Изменить</button>
            <button @onclick="async e => await Delete()">Удалить</button>
        </div>
    </div>
    <div class="inputes">
        <div class="inputes-cont">
            <span class="lables">Логин</span>
            <input type="text" @bind="@LoginField"></input>

            <span class="lables">Пароль</span>
            <input type="text" @bind="@PasswordField"></input>

            <span class="lables">Имя</span>
            <input type="text" @bind="@NameField"></input>

            <span class="lables">Фамилия</span>
            <input type="text" @bind="@FirstNameField"></input>

            <span class="lables">Отчество</span>
            <input type="text" @bind="@LastNameField"></input>

            <span class="lables">Номер телефона</span>
            <input type="text" @bind="@NumberOfPhoneField"></input>

            <span class="lables">Дата рождения</span>
            <input type="datetime" @bind="@DateOfBirthField"></input>

            <span class="lables">Пол</span>
            <select class="select" @bind="SexField">
                @if (listOfSexes != null)
                {
                    @foreach (var sex in listOfSexes)
                    {
                        <option value="@sex.Value">@sex.Value</option>
                    }
                }
            </select>
        </div>
        <span>@errorMassage</span>
    </div>
</div>

@code {
    private string LoginField { get; set; }
    private string PasswordField { get; set; }
    private string NameField { get; set; }
    private string FirstNameField { get; set; }
    private string LastNameField { get; set; }
    private DateTime DateOfBirthField { get; set; } = DateTime.Now;
    private string NumberOfPhoneField { get; set; }
    private string SexField { get; set; } = "male";

    private List<Sex> listOfSexes;
    private List<Patient> patients;
    private List<PatientView> patientsView;

    private Regex regexForNumberPhone = new Regex(@"^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$", RegexOptions.Compiled | RegexOptions.IgnoreCase);
    private Regex regexForText = new Regex(@"^[а-яА-Я ]*$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    private string errorMassage;
    private int deletedId;

    protected override async Task OnInitializedAsync()
    {
        listOfSexes = await _basicService.GetAllSexes();
        patients = await _patientService.GetPatients();
        patientsView = patients.Select(pat => new PatientView()
        {
            Login = pat.User.Login,
            Password = pat.User.Password,
            Name = pat.Name,
            FirstName = pat.FirstName,
            LastName = pat.LastName,
            NumberOfPhone = pat.NumberOfPhone,
            DateOfDirth = (DateTime)pat.DateOfDirth,
            Sex = pat.Sex.Value == "male" ? "Мужской" : "Женский",
            Tolons = pat.Tolons.Count
        }).ToList();
    }

    private async Task Search(ChangeEventArgs e)
    {

        if (!string.IsNullOrWhiteSpace((string)e.Value))
        {
            patients = await _patientService.Search((string)e.Value);
        }
        else
        {
            patients = await _patientService.GetPatients();
        }

        patientsView = patients.Select(pat => new PatientView()
        {
            Login = pat.User.Login,
            Password = pat.User.Password,
            Name = pat.Name,
            FirstName = pat.FirstName,
            LastName = pat.LastName,
            NumberOfPhone = pat.NumberOfPhone,
            DateOfDirth = (DateTime)pat.DateOfDirth,
            Sex = pat.Sex.Value == "male" ? "Мужской" : "Женский",
            Tolons = pat.Tolons.Count
        }).ToList();

        StateHasChanged();
    }

    private async Task Add()
    {
        if (!regexForNumberPhone.IsMatch(NumberOfPhoneField) || !regexForText.IsMatch(NameField) || !regexForText.IsMatch(FirstNameField) || !regexForText.IsMatch(LastNameField))
        {
            errorMassage = "Формат ввода не верный";
            return;
        }

        var tolons = new List<Tolon>();

        var user = new User()
            {
                Login = LoginField,
                Password = PasswordField,
            };

        var sex = new Sex()
            {
                Value = SexField
            };

        var patient = new Patient()
            {
                Name = NameField,
                FirstName = FirstNameField,
                LastName = LastNameField,
                NumberOfPhone = NumberOfPhoneField,
                DateOfDirth = DateOfBirthField,
                Sex = sex,
                User = user,
                Tolons = tolons
            };

        var id = await _patientService.AddPatient(patient);

        patients = await _patientService.GetPatients();
        patientsView = patients.Select(pat => new PatientView()
        {
            Login = pat.User.Login,
            Password = pat.User.Password,
            Name = pat.Name,
            FirstName = pat.FirstName,
            LastName = pat.LastName,
            NumberOfPhone = pat.NumberOfPhone,
            DateOfDirth = (DateTime)pat.DateOfDirth,
            Sex = pat.Sex.Value == "male" ? "Мужской" : "Женский",
            Tolons = pat.Tolons.Count
        }).ToList();

        ClearFields();

        StateHasChanged();
    }

    private async Task Edit()
    {
        if (!regexForNumberPhone.IsMatch(NumberOfPhoneField) || !regexForText.IsMatch(NameField) || !regexForText.IsMatch(FirstNameField) || !regexForText.IsMatch(LastNameField))
        {
            errorMassage = "Формат ввода не верный";
            return;
        }

        var patient = patients[deletedId];

        patient.User.Login = LoginField;
        patient.User.Password = PasswordField;

        patient.Name = NameField;
        patient.FirstName = FirstNameField;
        patient.LastName = LastNameField;
        patient.NumberOfPhone = NumberOfPhoneField;
        patient.DateOfDirth = DateOfBirthField;
        patient.Sex.Value = SexField;

        var id = await _patientService.UpdatePatient(patient);

        patients = await _patientService.GetPatients();
        patientsView = patients.Select(pat => new PatientView()
        {
            Login = pat.User.Login,
            Password = pat.User.Password,
            Name = pat.Name,
            FirstName = pat.FirstName,
            LastName = pat.LastName,
            NumberOfPhone = pat.NumberOfPhone,
            DateOfDirth = (DateTime)pat.DateOfDirth,
            Sex = pat.Sex.Value == "male" ? "Мужской" : "Женский",
            Tolons = pat.Tolons.Count
        }).ToList();

        ClearFields();

        StateHasChanged();
    }

    private async Task Delete()
    {
        var id = await _patientService.DeletePatient(patients[deletedId].PatientId);

        patients = await _patientService.GetPatients();
        patientsView = patients.Select(pat => new PatientView()
        {
            Login = pat.User.Login,
            Password = pat.User.Password,
            Name = pat.Name,
            FirstName = pat.FirstName,
            LastName = pat.LastName,
            NumberOfPhone = pat.NumberOfPhone,
            DateOfDirth = (DateTime)pat.DateOfDirth,
            Sex = pat.Sex.Value == "male" ? "Мужской" : "Женский",
            Tolons = pat.Tolons.Count
        }).ToList();

        ClearFields();

        StateHasChanged();
    }

    private void OnSelectRowClick(IgbGridCellEventArgs e)
    {
        deletedId = e.CellInfo.DataRow;

        LoginField = patientsView[deletedId].Login;
        PasswordField = patientsView[deletedId].Password;
        NameField = patientsView[deletedId].Name;
        FirstNameField = patientsView[deletedId].FirstName;
        LastNameField = patientsView[deletedId].LastName;
        NumberOfPhoneField = patientsView[deletedId].NumberOfPhone;
        SexField = patients[deletedId].Sex.Value;

        StateHasChanged();
    }

    private void ClearFields()
    {
        LoginField = string.Empty;
        PasswordField = string.Empty;
        NameField = string.Empty;
        FirstNameField = string.Empty;
        LastNameField = string.Empty;
        NumberOfPhoneField = string.Empty;
        SexField = string.Empty;

        errorMassage = string.Empty;
    }


}
