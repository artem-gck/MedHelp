@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IAuthService _authService;

<div class="@NavMenuCssClass">
    <div class="left-side">
        <div class="login">
            <span>@Name</span>
            <span>@Role</span>
            <span>@Specialezation</span>
        </div>
        <div class="navigate">
            <a href="/tolones" class="link">Мои толоны</a>
            <a href="/doctors" class="link">Врачи</a>
            @if (role == "doctor")
            {
                <a href="/patients" class="link">Пациенты</a>
                <a href="/visites" class="link">Мои приёмы</a>
            }
            else
            {
                <a href="/visites" class="link">Моя история болезней</a>
            }
                <a href="/about" class="link">О себе</a>
        </div>
        <div class="exit">
                <a href="/login" class="link" @onclick="async e => await Exit()">Выйти из аккаунта</a>
        </div>
    </div>
</div>

@code {
    private string Name { get; set; }
    private string Role { get; set; }
    private string Specialezation { get; set; }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string role;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        role = await localStorage.GetItemAsStringAsync("role");
        var login = await localStorage.GetItemAsStringAsync("login");
        login = login.Trim('\"');
        role = role.Trim('\"');

        if (role is not null)
        {
            user = await _authService.GetUser(login);
            Role = role == "doctor" ? "Врач" : "Пациент";

            Name = user.Doctor is not null ? user.Doctor.Name : user.Patient.Name;
            Specialezation = user.Doctor is not null ? user.Doctor.Specialization : string.Empty;
        }
    }

    private async Task Exit()
    {
        await localStorage.RemoveItemAsync("access_token");
        await localStorage.RemoveItemAsync("refresh_token");
        await localStorage.RemoveItemAsync("login");
        await localStorage.RemoveItemAsync("role");

        NavManager.NavigateTo("/login");
    }
}
