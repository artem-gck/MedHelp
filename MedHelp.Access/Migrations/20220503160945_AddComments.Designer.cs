// <auto-generated />
using System;
using MedHelp.Access.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedHelp.Access.Migrations
{
    [DbContext(typeof(MedHelpContext))]
    [Migration("20220503160945_AddComments")]
    partial class AddComments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedHelp.Access.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseId"), 1L, 1);

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceptionId")
                        .HasColumnType("int");

                    b.HasKey("DiseaseId");

                    b.HasIndex("ReceptionId")
                        .IsUnique();

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<DateTime?>("DateOfDirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("SexId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Reception", b =>
                {
                    b.Property<int>("ReceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionId"), 1L, 1);

                    b.Property<int?>("TolonId")
                        .HasColumnType("int");

                    b.HasKey("ReceptionId");

                    b.HasIndex("TolonId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Sex", b =>
                {
                    b.Property<int>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexId"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SexId");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Tolon", b =>
                {
                    b.Property<int>("TolonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TolonId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("TolonId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Tolons");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Comment", b =>
                {
                    b.HasOne("MedHelp.Access.Entity.Doctor", "Doctor")
                        .WithMany("Comments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedHelp.Access.Entity.Patient", "Patient")
                        .WithMany("Comments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Disease", b =>
                {
                    b.HasOne("MedHelp.Access.Entity.Reception", "Reception")
                        .WithOne("Disease")
                        .HasForeignKey("MedHelp.Access.Entity.Disease", "ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Doctor", b =>
                {
                    b.HasOne("MedHelp.Access.Entity.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedHelp.Access.Entity.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Patient", b =>
                {
                    b.HasOne("MedHelp.Access.Entity.Sex", "Sex")
                        .WithMany("Patients")
                        .HasForeignKey("SexId");

                    b.HasOne("MedHelp.Access.Entity.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("MedHelp.Access.Entity.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sex");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Reception", b =>
                {
                    b.HasOne("MedHelp.Access.Entity.Tolon", "Tolon")
                        .WithMany()
                        .HasForeignKey("TolonId");

                    b.Navigation("Tolon");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Tolon", b =>
                {
                    b.HasOne("MedHelp.Access.Entity.Doctor", "Doctor")
                        .WithMany("Tolons")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedHelp.Access.Entity.Patient", "Patient")
                        .WithMany("Tolons")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Doctor", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tolons");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Patient", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tolons");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Reception", b =>
                {
                    b.Navigation("Disease");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.Sex", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedHelp.Access.Entity.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
